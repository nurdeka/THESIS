# -*- coding: utf-8 -*-
"""tes_prediksi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16mKl227AyiaK3G1zLl5V74wd9iyeXC5p
"""

#Installing module
import numpy as np
import tensorflow as tf
from tensorflow import keras
import keras,os
from keras.layers import Dropout
from keras.models import Sequential
from tensorflow.keras import layers
from keras.layers import Dense, Conv3D, MaxPool3D , Flatten, MaxPooling3D
from numpy import load
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve
from sklearn.metrics import auc

#Start by connecting gdrive into the google colab

from google.colab import drive

drive.mount('/content/gdrive', force_remount=True)
os.chdir("/content/gdrive/MyDrive/DATA" )
os.getcwd()

"""##**MODEL 25x25**"""

os.chdir("/content/gdrive/MyDrive/DATA" )
roi = 25
channel =11

dict_data = load(f'dataset_{roi}x{roi}.npz')
dict_data.files
X_tests = dict_data["X_test"]
y_test = dict_data["y_test"]
print(X_tests.shape)
print(y_test.shape)

# Eksperimen Tanpa SLope TPI
X_test = np.stack((X_tests[:,:,:,0],  X_tests[:,:,:,3], X_tests[:,:,:,4],
                     X_tests[:,:,:,5], X_tests[:,:,:,6], X_tests[:,:,:,7], X_tests[:,:,:,8], X_tests[:,:,:,9], X_tests[:,:,:,10]), axis=-1)
print(X_test.shape)

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )
filename25 = 'model9var_25_934_976.h5'

path = os.path.join(os.getcwd(), filename25)
cn_model = load_model(path)

result25 = cn_model.evaluate(X_test, y_test)
cn_probs25 = cn_model.predict(X_test).ravel()

print("[test loss25, test accuracy CNN25]:", result25)

cn_probs25.shape

from numpy import save
save('prediksi25.npy', cn_probs25)
print('saving done')

r = cn_probs25
w = [round(num) for num in r]

#################################
from sklearn.metrics import confusion_matrix
y_true = y_test
y_pred = w
tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
specificity = tn / (tn+fp)
print('tn :', tn)
print('fp :', fp)
print('fn :', fn)
print('tp :', tp)
print('specificity :', specificity)

"""##**MODEL 15x15**"""

os.chdir("/content/gdrive/MyDrive/DATA" )
roi = 15
channel =11

dict_data = load(f'dataset_{roi}x{roi}.npz')
dict_data.files
X_tests = dict_data["X_test"]
y_test = dict_data["y_test"]
print(X_tests.shape)
print(y_test.shape)

# Eksperimen Tanpa SLope TPI
X_test = np.stack((X_tests[:,:,:,0],  X_tests[:,:,:,3], X_tests[:,:,:,4],
                     X_tests[:,:,:,5], X_tests[:,:,:,6], X_tests[:,:,:,7], X_tests[:,:,:,8], X_tests[:,:,:,9], X_tests[:,:,:,10]), axis=-1)
print(X_test.shape)

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )
filename15 = 'model9var_15_929_981.h5'

path = os.path.join(os.getcwd(), filename15)
cn_model = load_model(path)

result15 = cn_model.evaluate(X_test, y_test)
cn_probs15 = cn_model.predict(X_test).ravel()

print("[test loss15, test accuracy CNN15]:", result15)

r = cn_probs15
w = [round(num) for num in r]

#################################
from sklearn.metrics import confusion_matrix
y_true = y_test
y_pred = w
tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
specificity = tn / (tn+fp)
print('tn :', tn)
print('fp :', fp)
print('fn :', fn)
print('tp :', tp)
print('specificity :', specificity)

save('prediksi15.npy', cn_probs15)
print('saving done')

"""##**MODEL 11x11**"""

os.chdir("/content/gdrive/MyDrive/DATA")
roi = 11
channel =11

dict_data = load(f'dataset_{roi}x{roi}.npz')
dict_data.files
X_tests = dict_data["X_test"]
y_test = dict_data["y_test"]
print(X_tests.shape)
print(y_test.shape)

# Eksperimen Tanpa SLope TPI
X_test = np.stack((X_tests[:,:,:,0],  X_tests[:,:,:,3], X_tests[:,:,:,4],
                     X_tests[:,:,:,5], X_tests[:,:,:,6], X_tests[:,:,:,7], X_tests[:,:,:,8], X_tests[:,:,:,9], X_tests[:,:,:,10]), axis=-1)
print(X_test.shape)

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )
filename = 'model9var_11_926_980.h5'

path = os.path.join(os.getcwd(), filename)
cn_model = load_model(path)

result = cn_model.evaluate(X_test, y_test)
cn_probs11 = cn_model.predict(X_test).ravel()

print("[test loss11, test accuracy CNN11]:", result)

r = cn_probs11
w = [round(num) for num in r]

#################################
from sklearn.metrics import confusion_matrix
y_true = y_test
y_pred = w
tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
specificity = tn / (tn+fp)
print('tn :', tn)
print('fp :', fp)
print('fn :', fn)
print('tp :', tp)
print('specificity :', specificity)

cn_probs11

y_test

save('prediksi11.npy', cn_probs11)
print('saving done')

"""
##**MODEL 9x9**"""

os.chdir("/content/gdrive/MyDrive/DATA")
roi = 9
channel =11

dict_data = load(f'dataset_{roi}x{roi}.npz')
dict_data.files
X_tests = dict_data["X_test"]
y_test = dict_data["y_test"]
print(X_tests.shape)
print(y_test.shape)

# Eksperimen Tanpa SLope TPI
X_test = np.stack((X_tests[:,:,:,0],  X_tests[:,:,:,3], X_tests[:,:,:,4],
                     X_tests[:,:,:,5], X_tests[:,:,:,6], X_tests[:,:,:,7], X_tests[:,:,:,8], X_tests[:,:,:,9], X_tests[:,:,:,10]), axis=-1)
print(X_test.shape)

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )
filename = 'model9var_9_902_969.h5'

path = os.path.join(os.getcwd(), filename)
cn_model = load_model(path)

result = cn_model.evaluate(X_test, y_test)
cn_probs9 = cn_model.predict(X_test).ravel()

print("[test loss11, test accuracy CNN11]:", result)

save(f'prediksi_{roi}.npy', cn_probs9)
print('saving done')

"""
##**MODEL 7x7**"""

os.chdir("/content/gdrive/MyDrive/DATA")
roi = 7
channel =11

dict_data = load(f'dataset_{roi}x{roi}.npz')
dict_data.files
X_tests = dict_data["X_test"]
y_test = dict_data["y_test"]
print(X_tests.shape)
print(y_test.shape)

# Eksperimen Tanpa SLope TPI
X_test = np.stack((X_tests[:,:,:,0],  X_tests[:,:,:,3], X_tests[:,:,:,4],
                     X_tests[:,:,:,5], X_tests[:,:,:,6], X_tests[:,:,:,7], X_tests[:,:,:,8], X_tests[:,:,:,9], X_tests[:,:,:,10]), axis=-1)
print(X_test.shape)

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )
filename = 'model9var_7_905_968.h5'

path = os.path.join(os.getcwd(), filename)
cn_model = load_model(path)

result = cn_model.evaluate(X_test, y_test)
cn_probs7 = cn_model.predict(X_test).ravel()

print("[test loss11, test accuracy CNN11]:", result)

save(f'prediksi_{roi}.npy', cn_probs7)
print('saving done')

"""
##**MODEL 5x5**"""

os.chdir("/content/gdrive/MyDrive/DATA")
roi = 5
channel =11

dict_data = load(f'dataset_{roi}x{roi}.npz')
dict_data.files
X_tests = dict_data["X_test"]
y_test = dict_data["y_test"]
print(X_tests.shape)
print(y_test.shape)

# Eksperimen Tanpa SLope TPI
X_test = np.stack((X_tests[:,:,:,0],  X_tests[:,:,:,3], X_tests[:,:,:,4],
                     X_tests[:,:,:,5], X_tests[:,:,:,6], X_tests[:,:,:,7], X_tests[:,:,:,8], X_tests[:,:,:,9], X_tests[:,:,:,10]), axis=-1)
print(X_test.shape)

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )
filename = 'model9var_5_887_960.h5'

path = os.path.join(os.getcwd(), filename)
cn_model = load_model(path)

result = cn_model.evaluate(X_test, y_test)
cn_probs5 = cn_model.predict(X_test).ravel()

print("[test loss11, test accuracy CNN11]:", result)

save(f'prediksi_{roi}.npy', cn_probs5)
print('saving done')

"""##**EVALUATE**"""

#ALL MODELS 25
fpr_keras25, tpr_keras25, thresholds_keras25 = roc_curve(y_test, cn_probs25)
auc_keras25 = auc(fpr_keras25, tpr_keras25)
print('CNN Keras25: ROC AUC25=%.3f' % (auc_keras25))

#ALL MODELS 15
fpr_keras15, tpr_keras15, thresholds_keras15 = roc_curve(y_test, cn_probs15)
auc_keras15 = auc(fpr_keras15, tpr_keras15)
print('CNN Keras15: ROC AUC15=%.3f' % (auc_keras15))

#ALL MODELS 11
fpr_keras11, tpr_keras11, thresholds_keras11 = roc_curve(y_test, cn_probs11)
auc_keras11 = auc(fpr_keras11, tpr_keras11)
print('CNN Keras11: ROC AUC11=%.3f' % (auc_keras11))

#ALL MODELS 9
fpr_keras9, tpr_keras9, thresholds_keras9 = roc_curve(y_test, cn_probs9)
auc_keras9 = auc(fpr_keras9, tpr_keras9)
print('CNN Keras9: ROC AUC9=%.3f' % (auc_keras9))

#ALL MODELS 7
fpr_keras7, tpr_keras7, thresholds_keras7 = roc_curve(y_test, cn_probs7)
auc_keras7 = auc(fpr_keras7, tpr_keras7)
print('CNN Keras7: ROC AUC7=%.3f' % (auc_keras7))

#ALL MODELS 5
fpr_keras5, tpr_keras5, thresholds_keras5 = roc_curve(y_test, cn_probs5)
auc_keras5 = auc(fpr_keras5, tpr_keras5)
print('CNN Keras5: ROC AUC5=%.3f' % (auc_keras5))

"""##**PLOT**"""

# plot the roc curve for the model
ns_probs = [0 for _ in range(len(y_test))]
ns_auc = roc_auc_score(y_test, ns_probs)
ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)

plt.figure(figsize=(8, 6), dpi=200)
plt.rcParams["font.family"] = "Times New Roman"
plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')

plt.plot(fpr_keras5, tpr_keras5, label='ROI 5x5 (AUC = {:.3f})'.format(auc_keras5))
plt.plot(fpr_keras7, tpr_keras7, label='ROI 7x7 (AUC = {:.3f})'.format(auc_keras7))
plt.plot(fpr_keras9, tpr_keras9, label='ROI 9x9 (AUC = {:.3f})'.format(auc_keras9))
plt.plot(fpr_keras11, tpr_keras11, label='ROI 11x11 (AUC = {:.3f})'.format(auc_keras11))
plt.plot(fpr_keras15, tpr_keras15, label='ROI 15x15 (AUC = {:.3f})'.format(auc_keras15))
plt.plot(fpr_keras25, tpr_keras25, label='ROI 25x25 (AUC = {:.3f})'.format(auc_keras25))

# axis labels
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC curve')
# show the legend
plt.legend(loc='best')
# show the plot
plt.show()

"""##**ML**"""

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )
import joblib

filename1 = 'finalized_model_RF.sav'
filename2 = 'finalized_model_GBC.sav'
filename3 = 'finalized_model_SVC.sav'
filename5 = 'Finalized_nn.h5'

# load the model from disk
path = os.path.join(os.getcwd(), filename1)
rf_model = joblib.load(path)
path = os.path.join(os.getcwd(), filename2)
gb_model = joblib.load(path)
path = os.path.join(os.getcwd(), filename3)
sv_model = joblib.load(path)
path = os.path.join(os.getcwd(), filename5)
nn_model = load_model(path)
print("Loaded model from disk")

os.chdir("/content/gdrive/MyDrive/DATA/MODEL" )


# mengambil nilai tengah
#X_train_rf = X_train[:,12,12,:]
X_test_rf = X_tests[:,12,12,:]

result1 = rf_model.score(X_test_rf, y_test)
result2 = gb_model.score(X_test_rf, y_test)
#result3 = sv_model.score(X_test_rf, y_test)
result5 = nn_model.evaluate(X_test, y_test)
print('RF :', result1)
print('GB :',result2)
#print('SVC:',result3)
print("[test loss, test accuracy DNN]:", result5)

#%% ROC AUC
from sklearn.metrics import roc_curve
from sklearn.metrics import auc
ns_probs = [0 for _ in range(len(y_test))]
# predict probabilities
rf_probs = rf_model.predict_proba(X_test_rf)
gb_probs = gb_model.predict_proba(X_test_rf)
sv_probs = sv_model.predict_proba(X_test_rf)

nn_probs = nn_model.predict(X_test).ravel()
#ab_probs = model6.predict_proba(X_test)
# keep probabilities for the positive outcome only
rf_probs = rf_probs[:, 1]
gb_probs = gb_probs[:, 1]
sv_probs = sv_probs[:, 1]
nn_probs = nn_probs.ravel()
#gb_probs = gb_probs[:, 1]
#ab_probs = ab_probs[:, 1]
# calculate scores

from sklearn.metrics import roc_auc_score
ns_auc = roc_auc_score(y_test, ns_probs)
rf_auc = roc_auc_score(y_test, rf_probs)
gb_auc = roc_auc_score(y_test, gb_probs)
sv_auc = roc_auc_score(y_test, sv_probs)
nn_auc = roc_auc_score(y_test, nn_probs)
#gb_auc = roc_auc_score(y_test, gb_probs)
#ab_auc = roc_auc_score(y_test, ab_probs)
# summarize scores
print('No Skill: ROC AUC=%.3f' % (ns_auc))
print('Random Forest: ROC AUC=%.3f' % (rf_auc))
print('Gradien Boost: ROC AUC=%.3f' % (gb_auc))
print('Support Vector: ROC AUC=%.3f' % (sv_auc))
print('Neural Network: ROC AUC=%.3f' % (nn_auc))
#print('GBC: ROC AUC=%.3f' % (gb_auc))
#print('ABC: ROC AUC=%.3f' % (ab_auc))
# calculate roc curves
ns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)
rf_fpr, rf_tpr, _ = roc_curve(y_test, rf_probs)
gb_fpr, gb_tpr, _ = roc_curve(y_test, gb_probs)
sv_fpr, sv_tpr, _ = roc_curve(y_test, sv_probs)

nn_fpr, nn_tpr, _ = roc_curve(y_test, nn_probs)
#gb_fpr, gb_tpr, _ = roc_curve(y_test, gb_probs)
#ab_fpr, ab_tpr, _ = roc_curve(y_test, ab_probs)
auc_keras25 = auc(fpr_keras25, tpr_keras25)
print('CNN Keras: ROC AUC=%.3f' % (auc_keras25))

# plot the roc curve for the model
plt.figure(figsize=(8, 6), dpi=200)
plt.rcParams["font.family"] = "Times New Roman"
plt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')

plt.plot(sv_fpr, sv_tpr, label='SVC (AUC = {:.3f})'.format(sv_auc))
plt.plot(gb_fpr, gb_tpr, label='GBC (AUC= {:.3f})'.format(gb_auc))
plt.plot(nn_fpr, nn_tpr, label='NN (AUC = {:.3f})'.format(nn_auc))
plt.plot(rf_fpr, rf_tpr, label='RF (AUC = {:.3f})'.format(rf_auc))
plt.plot(fpr_keras25, tpr_keras25, label='Proposed CNN (AUC = {:.3f})'.format(auc_keras25))


#pyplot.plot(kn_fpr, kn_tpr, marker='.', label='KNN')
#pyplot.plot(xg_fpr, xg_tpr, marker='.', label='XGB')
#pyplot.plot(rf_fpr, rf_tpr, marker='.', label='RF')
# axis labels
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC curve')
# show the legend
plt.legend(loc='best')
# show the plot
plt.show()